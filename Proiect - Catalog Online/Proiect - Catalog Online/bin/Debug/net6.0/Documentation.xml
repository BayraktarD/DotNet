<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Proiect - Catalog Online</name>
    </assembly>
    <members>
        <member name="T:Proiect___Catalog_Online.Controllers.MarkController">
            <summary>
            Mark Controller
            </summary>
        </member>
        <member name="M:Proiect___Catalog_Online.Controllers.MarkController.GetStudentMarksAsync(System.Int32)">
            <summary>
            GEt Student's Marks
            </summary>
            <param name="studentId"></param>
            <returns>List of Student's Marks</returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Controllers.MarkController.GetStudentMarksAtSubjectAsync(System.Int32,System.Int32)">
            <summary>
            Get Student's Marks For Certain Subject
            </summary>
            <param name="studentId"></param>
            <param name="subjectId"></param>
            <returns>list of student's marks</returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Controllers.MarkController.GetStudentAveragesForEachSubjectAsync(System.Int32)">
            <summary>
            Get Student's Averages For Each Subject
            </summary>
            <param name="studentId"></param>
            <returns>string - subject name/error; decimal - mean</returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Controllers.MarkController.AddMarkAsync(Proiect___Catalog_Online.DTOs.MarkDTO)">
            <summary>
            Add new Mark
            </summary>
            <param name="markDTO"></param>
            <returns>int - new mark Id; string - status</returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Controllers.StudentController.GetStudentsAsync">
            <summary>
            Returenaza lista studentilor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Controllers.StudentController.GetStudentByIdAsync(System.Int32)">
            <summary>
            Returneaza un student in functie de Id.
            </summary>
            <param name="id">Id-ul studentului.</param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Controllers.StudentController.AddStudentAsync(Proiect___Catalog_Online.DTOs.StudentDTO)">
            <summary>
            Adauga un student nou.
            </summary>
            <param name="studentDTO">Studentul</param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Controllers.StudentController.DeleteStudentAsync(System.Int32,System.Boolean)">
            <summary>
            Stergere student pe baza Id-ului studentului.
            </summary>
            <param name="id">Id-ul studentului care se vrea sters.</param>
            <param name="deleteAddress">true - sterge si adresa, false - nu sterge adresa studentului</param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Controllers.StudentController.UpdateStudentAsync(Proiect___Catalog_Online.DTOs.StudentDTO,System.Boolean)">
            <summary>
            Actualizare date student.
            </summary>
            <param name="student"></param>
            <param name="updateAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Controllers.StudentController.GetStudentAddressAsync(System.Int32)">
            <summary>
            Returneaza adresa studentului dupa Id-ul studentului.
            </summary>
            <param name="studentId">Id-ul studentului a carui adresa se va returna.</param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Controllers.StudentController.UpdateStudentAddressAsync(System.Int32,Proiect___Catalog_Online.DTOs.AddressDTO)">
            <summary>
            Actualizare adresa student pe baza Id-ului de student.
            </summary>
            <param name="studentId">Id-ul studentului a carui adresa se vrea actualizata.</param>
            <param name="address">Adresa</param>
            <returns></returns>
        </member>
        <member name="T:Proiect___Catalog_Online.Controllers.SubjectController">
            <summary>
            Subject Controller
            </summary>
        </member>
        <member name="M:Proiect___Catalog_Online.Controllers.SubjectController.#ctor(Proiect___Catalog_Online.Interfaces.Services.ISubjectService)">
            <summary>
            Subject Controller Constructor
            </summary>
            <param name="subjectService"></param>
        </member>
        <member name="T:Proiect___Catalog_Online.Interfaces.Repositories.IMarkRepository">
            <summary>
            Mark Repository Interface
            </summary>
        </member>
        <member name="M:Proiect___Catalog_Online.Interfaces.Repositories.IMarkRepository.GetStudentMarksAsync(System.Int32)">
            <summary>
            Get Student's Marks
            </summary>
            <param name="studentId"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Interfaces.Repositories.IMarkRepository.GetStudentMarksAtSubjectAsync(System.Int32,System.Int32)">
            <summary>
            Get Student's Marks For Certain Subject
            </summary>
            <param name="studentId"></param>
            <param name="subjectId"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Interfaces.Repositories.IMarkRepository.GetStudentAveragesForEachSubjectAsync(System.Int32)">
            <summary>
            Get Student's Averages For Each Subject
            </summary>
            <param name="studentId"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Interfaces.Repositories.IMarkRepository.AddMarkAsync(Proiect___Catalog_Online.DTOs.MarkDTO)">
            <summary>
            Add Mark
            </summary>
            <param name="markDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Interfaces.Repositories.IMarkRepository.DeleteStudentMarksAsync(System.Int32)">
            <summary>
            Delete student's marks
            </summary>
            <param name="studentId"></param>
            <returns></returns>
        </member>
        <member name="T:Proiect___Catalog_Online.Interfaces.Repositories.ISubjectRepository">
            <summary>
            Subject Repository Intercace
            </summary>
        </member>
        <member name="M:Proiect___Catalog_Online.Interfaces.Repositories.ISubjectRepository.AddSubjectAsync(Proiect___Catalog_Online.DTOs.SubjectDTO)">
            <summary>
            Adaugare Curs
            </summary>
            <param name="subjectDTO">Curs</param>
            <returns></returns>
        </member>
        <member name="T:Proiect___Catalog_Online.Interfaces.Services.IMarkService">
            <summary>
            Mark Service Inteface
            </summary>
        </member>
        <member name="M:Proiect___Catalog_Online.Interfaces.Services.IMarkService.GetStudentMarksAsync(System.Int32)">
            <summary>
            Get Student's Marks
            </summary>
            <param name="studentId"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Interfaces.Services.IMarkService.GetStudentMarksAtSubjectAsync(System.Int32,System.Int32)">
            <summary>
            Get Student's Marks For Certain Subject
            </summary>
            <param name="studentId"></param>
            <param name="subjectId"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Interfaces.Services.IMarkService.GetStudentAveragesForEachSubjectAsync(System.Int32)">
            <summary>
            Get Student's Averages For Each Subject
            </summary>
            <param name="studentId"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Interfaces.Services.IMarkService.AddMarkAsync(Proiect___Catalog_Online.DTOs.MarkDTO)">
            <summary>
            Get Student's Averages For Each Subject
            </summary>
            <param name="studentId"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Interfaces.Services.IMarkService.DeleteStudentMarksAsync(System.Int32)">
            <summary>
            Delete student's marks
            </summary>
            <param name="studentId"></param>
            <returns></returns>
        </member>
        <member name="T:Proiect___Catalog_Online.Interfaces.Services.ISubjectService">
            <summary>
            Subject Service Interface
            </summary>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.AddressRepository.UpdateAddressAsync(System.Int32,Proiect___Catalog_Online.DTOs.AddressDTO)">
            <summary>
            Actualizeaza o adresa in functie de Id.
            </summary>
            <param name="addressId">Id-ul adresei care se vrea modificata.</param>
            <param name="addressDTO">Noua adresa.</param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.AddressRepository.DeleteAddressAsync(System.Int32)">
            <summary>
            Sterge o adresa in functie de Id.
            </summary>
            <param name="addressId">Id-ul adresei care se vrea actualizat.</param>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.AddressRepository.GetAddressById(System.Int32)">
            <summary>
            Returneaza adresa dupa Id-ul adresei.
            </summary>
            <param name="id">Id-ul adresei care se vrea returnata.</param>
            <returns></returns>
        </member>
        <member name="T:Proiect___Catalog_Online.Repositories.MarkRepository">
            <summary>
            Mark Repository Class
            </summary>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.MarkRepository.#ctor(CatalogOnline_ClassLibrary.EntityModels.SchoolDbContext)">
            <summary>
            Mark Repository Contstructor
            </summary>
            <param name="schoolDbContext"></param>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.MarkRepository.GetStudentMarksAsync(System.Int32)">
            <summary>
            Get Studnet's Marks
            </summary>
            <param name="studentId"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.MarkRepository.GetStudentMarksAtSubjectAsync(System.Int32,System.Int32)">
            <summary>
            Get Student's Marks At Certain Subject
            </summary>
            <param name="studentId"></param>
            <param name="subjectId"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.MarkRepository.GetStudentAveragesForEachSubjectAsync(System.Int32)">
            <summary>
            Get Student's Averages For Each Subject
            </summary>
            <param name="studentId"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.MarkRepository.DeleteStudentMarksAsync(System.Int32)">
            <summary>
            Delete student's marks
            </summary>
            <param name="studentId"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.MarkRepository.AddMarkAsync(Proiect___Catalog_Online.DTOs.MarkDTO)">
            <summary>
            Add Mark
            </summary>
            <param name="markDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.StudentRepository.GetAllStudentsAsync">
            <summary>
            Returneaza lista studentilor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.StudentRepository.GetStudentByIdAsync(System.Int32)">
            <summary>
            Returneaza studentul dupa Id.
            </summary>
            <param name="id">Id-ul studentului.</param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.StudentRepository.AddStudentAsync(Proiect___Catalog_Online.DTOs.StudentDTO)">
            <summary>
            Adauga un studentDTO nou in baza de date.
            </summary>
            <param name="student">Studentul</param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.StudentRepository.UpdateStudentAsync(Proiect___Catalog_Online.DTOs.StudentDTO,System.Boolean)">
            <summary>
            Actualizeaza un studentDTO si adresa acestuia. Adresa se actualizeaza doar daca se cere actualizarea acesteia.
            </summary>
            <param name="studentDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.StudentRepository.DeleteStudentAsync(System.Int32,System.Boolean)">
            <summary>
            Sterge un sutdent dupa id. Se poate sterge si adresa daca se cere.
            </summary>
            <param name="id">Id-ul studentului care trebuie sters.</param>
            <param name="deleteStudentAddress">true - sterge si adresa, false - nu sterge adresa.</param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.StudentRepository.GetStudentAddressAsync(System.Int32)">
            <summary>
            Returneaza adresa unui studentDTO dupa Id-ul studentului.
            </summary>
            <param name="studentId">Id-ul studentului a carui adresa dorim sa o obtinem.</param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.StudentRepository.UpdateStudentAddressAsync(System.Int32,Proiect___Catalog_Online.DTOs.AddressDTO)">
            <summary>
            Actualizare adresa pentru studentul cu Id-ul funrizat.
            </summary>
            <param name="studentId">Id-ul studentului a carui adresa dorim sa o modificam.</param>
            <param name="addressDTO">Noua adresa a studentului.</param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.StudentRepository.GetStudentsListOrderedByMarksAverageAsync(System.Boolean)">
            <summary>
            Get Students List Ordered By Marks Average
            </summary>
            <param name="orderByAscending"></param>
            <returns>a ordered list of students</returns>
        </member>
        <member name="T:Proiect___Catalog_Online.Repositories.SubjectRepository">
            <summary>
            Subject Repository Class
            </summary>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.SubjectRepository.#ctor(CatalogOnline_ClassLibrary.EntityModels.SchoolDbContext)">
            <summary>
            Constructor Subject Repository
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:Proiect___Catalog_Online.Repositories.SubjectRepository.AddSubjectAsync(Proiect___Catalog_Online.DTOs.SubjectDTO)">
            <summary>
            Adaugare curs
            </summary>
            <param name="subjectDTO">Curs</param>
            <returns></returns>
        </member>
        <member name="T:Proiect___Catalog_Online.Services.MarkService">
            <summary>
            Mark Service Class
            </summary>
        </member>
        <member name="M:Proiect___Catalog_Online.Services.MarkService.#ctor(Proiect___Catalog_Online.Interfaces.Repositories.IMarkRepository)">
            <summary>
            Mark Service Constructor
            </summary>
            <param name="markRepository"></param>
        </member>
        <member name="M:Proiect___Catalog_Online.Services.MarkService.GetStudentMarksAsync(System.Int32)">
            <summary>
            Get Studnet's Marks
            </summary>
            <param name="studentId"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Services.MarkService.GetStudentMarksAtSubjectAsync(System.Int32,System.Int32)">
            <summary>
            Get Student's Marks At Certain Subject
            </summary>
            <param name="studentId"></param>
            <param name="subjectId"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Services.MarkService.GetStudentAveragesForEachSubjectAsync(System.Int32)">
            <summary>
            Get Student's Averages For Each Subject
            </summary>
            <param name="studentId"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Services.MarkService.AddMarkAsync(Proiect___Catalog_Online.DTOs.MarkDTO)">
            <summary>
            Add Mark
            </summary>
            <param name="markDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Services.StudentService.GetAllStudentsAsync">
            <summary>
            Returneaza lista studentilor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Services.StudentService.GetStudentByIdAsync(System.Int32)">
            <summary>
            Returneaza studentul dupa Id.
            </summary>
            <param name="id">Id-ul studentului.</param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Services.StudentService.AddStudentAsync(Proiect___Catalog_Online.DTOs.StudentDTO)">
            <summary>
            Adauga un studentDTO nou in baza de date.
            </summary>
            <param name="student">Studentul</param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Services.StudentService.UpdateStudentAsync(Proiect___Catalog_Online.DTOs.StudentDTO,System.Boolean)">
            <summary>
            Actualizeaza un studentDTO si adresa acestuia. Adresa se actualizeaza doar daca se cere actualizarea acesteia.
            </summary>
            <param name="studentDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Services.StudentService.DeleteStudentAsync(System.Int32,System.Boolean)">
            <summary>
            Sterge un sutdent dupa id. Se poate sterge si adresa daca se cere.
            </summary>
            <param name="id">Id-ul studentului care trebuie sters.</param>
            <param name="deleteStudentAddress">true - sterge si adresa, false - nu sterge adresa.</param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Services.StudentService.GetStudentAddressAsync(System.Int32)">
            <summary>
            Returneaza adresa unui studentDTO dupa Id-ul studentului.
            </summary>
            <param name="studentId">Id-ul studentului a carui adresa dorim sa o obtinem.</param>
            <returns></returns>
        </member>
        <member name="M:Proiect___Catalog_Online.Services.StudentService.UpdateStudentAddressAsync(System.Int32,Proiect___Catalog_Online.DTOs.AddressDTO)">
            <summary>
            Actualizare adresa pentru studentul cu Id-ul funrizat.
            </summary>
            <param name="studentId">Id-ul studentului a carui adresa dorim sa o modificam.</param>
            <param name="addressDTO">Noua adresa a studentului.</param>
            <returns></returns>
        </member>
        <member name="T:Proiect___Catalog_Online.Services.SubjectService">
            <summary>
            Subject Service Class
            </summary>
        </member>
        <member name="M:Proiect___Catalog_Online.Services.SubjectService.#ctor(Proiect___Catalog_Online.Interfaces.Repositories.ISubjectRepository)">
            <summary>
            Subject Service Constructor
            </summary>
            <param name="subjectRepository"></param>
        </member>
        <member name="T:Proiect___Catalog_Online.Utils.OrderedDictionary`2">
            <summary>
            Custom OrderedDictionary implementation
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
    </members>
</doc>
